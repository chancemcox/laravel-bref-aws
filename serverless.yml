service: laravel-test-aws

provider:
  name: aws
  runtime: provided.al2
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  lambdaHashingVersion: 20201221
  apiGateway:
    shouldStartNameWithService: true
    binaryMediaTypes:
      - '*/*'
#  vpc:
#    subnetIds:
#      "Fn::Split":
#        - ","
#        - ${self:custom.${self:provider.stage}_subnetIds}
#    securityGroupIds:
#      "Fn::Split":
#        - ","
#        - ${self:custom.${self:provider.stage}_securityGroupIds}
  profile: ccox-mfa
  timeout: 900
  memorySize: 3008
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:*
          Resource: "*"
        - Effect: Allow
          Action:
            - dynamodb:*
          Resource: "*"
        - Effect: Allow
          Action:
            - sqs:*
          Resource: "*"
        - Effect: Allow
          Action:
            - ses:*
          Resource: "*"
  environment:
    S3_ASSETS: ${self:service}-${self:provider.stage}-assets
    SQS_ACTION_QUEUE: !Ref MyActionQueue
    SQS_QUEUE: !Ref MyQueue
    QUEUE_CONNECTION: sqs
    BREF_BINARY_RESPONSES: '1'
    SERVERLESS: true
    DYNAMODB_CONNECTION: aws_iam_role
    APP_STORAGE: /tmp
    LOG_CHANNEL: stderr


package:
  patterns:
    - '!node_modules/**'
    - '!public/storage'
    - '!resources/assets/**'
    - '!tests/**'
    - '!storage/**'
    - '!public/assets/**'
    - 'storage/oauth-private.key'
    - 'storage/oauth-public.key'
    - 'storage/oauth-private2.key'
    - 'storage/oauth-public2.key'
    - '.env'

functions:
  web:
    handler: public/index.php
    timeout: 28
    runtime: php-80-fpm
    memorySize: 8100
    layers:
      - ${bref-extra:gmp-php-80}
    events:
      - http: 'ANY /'
      - http: 'ANY /{proxy+}'
  artisan:
    handler: artisan
    timeout: 120
    runtime: php-80-console
  worker:
    handler: worker.php
    timeout: 900
    environment:
      SQS_QUEUE: !Ref MyQueue
    events:
      - sqs:
          arn: !GetAtt MyQueue.Arn
          batchSize: 1

custom:
  dev_cname: 'laravel.cox-fam.com'
  apigwBinary:
    types:
      - '*/*'
  prune:
    automatic: true
    number: 3
  cloudfrontInvalidate:
    - distributionIdKey: "WebsiteCDNId"
      autoInvalidate: true
      items:
        - "/assets/*"
  s3Sync:
    - bucketName: ${self:service}-${self:provider.stage}-assets
      acl: public-read
      localDir: public/
 

plugins:
  - ./vendor/bref/bref
  - ./vendor/bref/extra-php-extensions
  - serverless-plugin-log-retention
  - serverless-prune-plugin
  - serverless-s3-sync

resources:
  Resources:
    MyAssetsBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
        BucketName: ${self:service}-${self:provider.stage}-assets
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
    MyAssetsBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref MyAssetsBucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Join ['/', [!GetAtt MyAssetsBucket.Arn, '*']]
    MyWebsiteCDN:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Aliases:
            - ${self:custom.${self:provider.stage}_cname}
          Enabled: true
          PriceClass: PriceClass_100
          HttpVersion: http2
          Origins:
            - Id: MyWebsite
              DomainName: !Join ['.', [!Ref ApiGatewayRestApi, 'execute-api', !Ref AWS::Region, 'amazonaws.com']]
              OriginPath: "/${opt:stage, 'dev'}"
              CustomOriginConfig:
                OriginProtocolPolicy: 'https-only'
            - Id: MyAssets
              DomainName: !GetAtt MyAssetsBucket.RegionalDomainName
              S3OriginConfig: {}
          DefaultCacheBehavior:
            AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
            TargetOriginId: MyWebsite
            DefaultTTL: 0
            MinTTL: 0
            MaxTTL: 0
            ForwardedValues:
              QueryString: true
              Cookies:
                Forward: all
              Headers:
                - 'Accept'
                - 'Accept-Language'
                - 'Origin'
                - 'Referer'
                - 'Access-Control-Request-Headers'
                - 'Access-Control-Request-Method'
                - 'Authorization'
                - 'authorization'
            ViewerProtocolPolicy: redirect-to-https
          CacheBehaviors:
            - PathPattern: 'assets/*'
              TargetOriginId: MyAssets
              AllowedMethods: [GET, HEAD]
              ForwardedValues:
                QueryString: 'false'
                Cookies:
                  Forward: none
              ViewerProtocolPolicy: redirect-to-https
              Compress: true
          CustomErrorResponses:
            - ErrorCode: 500
              ErrorCachingMinTTL: 0
            - ErrorCode: 504
              ErrorCachingMinTTL: 0
          # ViewerCertificate:
          #   AcmCertificateArn: arn:aws:acm:us-east-1:012959706571:certificate/d16074e9-1dc5-420a-a51f-8a5347995ba1
          #   SslSupportMethod: sni-only
          #   MinimumProtocolVersion: TLSv1.2_2019
    MyActionQueue:
      Type: AWS::SQS::Queue
      Properties:
        KmsMasterKeyId: alias/aws/sqs
        VisibilityTimeout: 900
        QueueName: ${self:service}-${self:provider.stage}-Action
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt MyDeadLetterQueue.Arn
    MyDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        KmsMasterKeyId: alias/aws/sqs
        QueueName: ${self:service}-${self:provider.stage}-Action-DLQ
        MessageRetentionPeriod: 1209600
    MyQueue:
      Type: AWS::SQS::Queue
      Properties:
        VisibilityTimeout: 900
        KmsMasterKeyId: alias/aws/sqs
        QueueName: ${self:provider.stage}-${self:service}
        RedrivePolicy:
          maxReceiveCount: 3
          deadLetterTargetArn: !GetAtt MyQueueDeadLetterQueue.Arn
    MyQueueDeadLetterQueue:
      Type: AWS::SQS::Queue
      Properties:
        KmsMasterKeyId: alias/aws/sqs
        QueueName: ${self:provider.stage}-${self:service}-DLQ
        MessageRetentionPeriod: 1209600
    MyMetaTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-laravel-test-meta
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: id
            AttributeType: N
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        SSESpecification:
          SSEEnabled: true
    MyPermissionsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-laravel-test-permissions
        BillingMode: PAY_PER_REQUEST
        GlobalSecondaryIndexes:
          - IndexName: uuidIndex
            KeySchema:
              - AttributeName: room
                KeyType: HASH
              - AttributeName: uuid
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        AttributeDefinitions:
          - AttributeName: room
            AttributeType: S
          - AttributeName: id
            AttributeType: N
          - AttributeName: uuid
            AttributeType: N
        KeySchema:
          - AttributeName: room
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
        SSESpecification:
          SSEEnabled: true
  Outputs:
    MyWebsiteCDNId:
      Description: CDN distribution id.
      Value:
        Ref: MyWebsiteCDN
